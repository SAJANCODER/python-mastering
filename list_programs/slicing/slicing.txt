slicing

Basic Level
(completed)
Write a program to rotate a list to the left by one position.
Example: [1,2,3,4,5] â†’ [2,3,4,5,1]

Rotate a list to the right by one position.
Example: [1,2,3,4,5] â†’ [5,1,2,3,4]

Reverse a list using slicing ([::-1]).

Take a list of numbers as input and print only the first half of the list.

Print the list after removing the first and last elements using slicing.

ðŸ”¹ Intermediate Level
(completed)
Rotate a list to the left by k positions (user should enter k).
Example: List = [1,2,3,4,5], k=2 â†’ [3,4,5,1,2]

Rotate a list to the right by k positions (user should enter k).
Example: List = [1,2,3,4,5], k=3 â†’ [3,4,5,1,2]

Given a list, print every 2nd element using slicing.
Example: [10,20,30,40,50] â†’ [20,40]

Swap the first half and the second half of a list using slicing.
Example: [1,2,3,4,5,6] â†’ [4,5,6,1,2,3]

Take a string input and rotate its characters to the right by 2 positions.
Example: "hello" â†’ "lohel"

ðŸ”¹ Advanced Level

Rotate a list in both directions (left and right) without using slicing (use loops instead). --completed

Given a circular rotation, find the element at the kth index after n rotations. --completed

Implement a function rotate_list(lst, k, direction) where direction can be "left" or "right". --completed

Use list comprehension to rotate a list by k positions. --completed

For a given list, perform rotation until it comes back to the original arrangement. Count the number of rotations needed.